coords$lat <- gsub("Â","",coords$lat)
coords$lat <- gsub("'","",coords$lat)
coords$lat <- gsub("\"","",coords$lat)
coords$lat <- gsub(" ","",coords$lat)
coords$lat <- gsub("°$","",coords$lat)  #Does this work? Trying to conditional replace if ° is last element in string
conv.coords <- NULL
#Loop through each coordinate value
for(i in 1:nrow(coords)){
#Open loop storage variables
df <- NULL
lat <- 0
long <- 0
stor.lat <- 0
stor.long <- 0
#Check if latitude string is all numeric
if(!is.na(as.numeric(coords$lat[i]))){
#If value within proper range for decimal degrees, pass on
if(abs(coords$lat[i])<70) {lat <- abs(coords$lat[i])}
#If value matches longitude instead of latitude, add SWAP flag
if(abs(coords$lat[i])>70 | abs(coords$lat[i])<170) {lat <- paste0(as.character(coords$lat[i]),"SWAP")}
#If value outside range, add flag to string
if(abs(coords$lat[i])>70) {lat <- paste0(as.character(coords$lat[i]),"_FLAG")}
}
#Check if longitude string is all numeric
if(!is.na(as.numeric(coords$long[i]))){
#If value within proper range for decimal degrees, pass on
if(abs(coords$long[i])<170) {long <- abs(coords$long[i])}
#If value outside range, add flag to string
if(abs(coords$long[i])>170) {long <- paste0(as.character(coords$long[i]),"_FLAG")}
}
#Swap lat-long if mismatched
if(grepl("SWAP",lat)) {
lat <- gsub("SWAP","",lat)
stor.lat <- lat
lat <- long
long <- stor.lat
}
#If string matches format for DMS, convert and pass on
if(grepl("°",coords$lat[i])) {
#Fix coord format spacing
stor.lat <- gsub("°"," ",coords$lat[i])
#Convert lat from DMS to DD
lat <- conv_unit(stor.lat, from = 'deg_dec_min', to = 'dec_deg')
}
#If string matches format for DMS, convert and pass on
if(grepl("°",coords$long[i])) {
#Fix coord format spacing
stor.long <- gsub("°"," ",coords$long[i])
#Convert long from DMS to DD
long <- as.numeric(measurements::conv_unit(stor.long, from = 'deg_dec_min', to = 'dec_deg'))
}
#If none of the above, add flag to string to add conditional fix
if(lat == 0){lat <- paste0(coords$lat[i],"_FLAG")}
if(long == 0){long <- paste0(coords$long[i],"_FLAG")}
df <- data.frame(i,lat, long)
conv.coords <- rbind(df,conv.coords)
}
View(conv.coords)
coords$lat[i]
abs(coords$lat[i])
coords$lat[i]
abs(coords$lat[i])
abs(as.numeric(coords$lat[i]))
data <- read.csv("E:/Box/Box Sync/SOM_tarball/tarball_10-18-2018.csv", header=TRUE, stringsAsFactors = FALSE)
coords <- data[,c(18,12:14)]
#how many unique coords do we have?
lat.uniq <- unique(data$lat)
long.uniq <- unique(data$long)
#If lat is # >x<, flag ok, then fix the rest based on pattern
#...Remove A symbols
library(measurements) #provides coordinate conversions
#example
# x = read.table(text = "
#    lat     long
# 105252 30°25.264 9°01.331
# change the degree symbol to a space
# x$lat = gsub('°', ' ', x$lat)
# x$long = gsub('°', ' ', x$long)
# convert from decimal minutes to decimal degrees
# x$lat = measurements::conv_unit(x$lat, from = 'deg_dec_min', to = 'dec_deg')
# x$long = measurements::conv_unit(x$long, from = 'deg_dec_min', to = 'dec_deg')
###Clean up lat-longs
#Remove 'W" and Â from longitudes
coords$long <- gsub("W","",coords$long)
coords$long <- gsub("Â","",coords$long)
coords$long <- gsub("'","",coords$long)
coords$long <- gsub("\"","",coords$long)
coords$long <- gsub(" ","",coords$long)
coords$long <- gsub("°$","",coords$long)
#Remove 'N" and Â from longitudes
coords$lat <- gsub("N","",coords$lat)
coords$lat <- gsub("Â","",coords$lat)
coords$lat <- gsub("'","",coords$lat)
coords$lat <- gsub("\"","",coords$lat)
coords$lat <- gsub(" ","",coords$lat)
coords$lat <- gsub("°$","",coords$lat)  #Does this work? Trying to conditional replace if ° is last element in string
conv.coords <- NULL
#Loop through each coordinate value
for(i in 1:nrow(coords)){
#Open loop storage variables
df <- NULL
lat <- 0
long <- 0
stor.lat <- 0
stor.long <- 0
#Check if latitude string is all numeric
if(!is.na(as.numeric(coords$lat[i]))){
#If value within proper range for decimal degrees, pass on
if(abs(as.numeric(coords$lat[i])<70)) {lat <- abs(as.numeric(coords$lat[i]))}
#If value matches longitude instead of latitude, add SWAP flag
if(abs(as.numeric(coords$lat[i]))>70 | abs(as.numeric(coords$lat[i]))<170) {lat <- paste0(as.character(coords$lat[i]),"SWAP")}
#If value outside range, add flag to string
if(abs(as.numeric(coords$lat[i]))>70) {lat <- paste0(as.character(coords$lat[i]),"_FLAG")}
}
#Check if longitude string is all numeric
if(!is.na(as.numeric(coords$long[i]))){
#If value within proper range for decimal degrees, pass on
if(abs(as.numeric(coords$long[i])<170)) {long <- abs(as.numeric(coords$long[i]))}
#If value outside range, add flag to string
if(abs(as.numeric(coords$long[i]))>170) {long <- paste0(as.character(coords$long[i]),"_FLAG")}
}
#Swap lat-long if mismatched
if(grepl("SWAP",lat)) {
lat <- gsub("SWAP","",lat)
stor.lat <- lat
lat <- long
long <- stor.lat
}
#If string matches format for DMS, convert and pass on
if(grepl("°",coords$lat[i])) {
#Fix coord format spacing
stor.lat <- gsub("°"," ",coords$lat[i])
#Convert lat from DMS to DD
lat <- conv_unit(stor.lat, from = 'deg_dec_min', to = 'dec_deg')
}
#If string matches format for DMS, convert and pass on
if(grepl("°",coords$long[i])) {
#Fix coord format spacing
stor.long <- gsub("°"," ",coords$long[i])
#Convert long from DMS to DD
long <- as.numeric(measurements::conv_unit(stor.long, from = 'deg_dec_min', to = 'dec_deg'))
}
#If none of the above, add flag to string to add conditional fix
if(lat == 0){lat <- paste0(coords$lat[i],"_FLAG")}
if(long == 0){long <- paste0(coords$long[i],"_FLAG")}
df <- data.frame(i,coords$lat[i], coords$long[i], stor.lat, stor.long, lat, long)
conv.coords <- rbind(df,conv.coords)
}
View(conv.coords)
data <- read.csv("E:/Box/Box Sync/SOM_tarball/tarball_10-18-2018.csv", header=TRUE, stringsAsFactors = FALSE)
coords <- data[,c(18,12:14)]
#how many unique coords do we have?
lat.uniq <- unique(data$lat)
long.uniq <- unique(data$long)
#If lat is # >x<, flag ok, then fix the rest based on pattern
#...Remove A symbols
library(measurements) #provides coordinate conversions
#example
# x = read.table(text = "
#    lat     long
# 105252 30°25.264 9°01.331
# change the degree symbol to a space
# x$lat = gsub('°', ' ', x$lat)
# x$long = gsub('°', ' ', x$long)
# convert from decimal minutes to decimal degrees
# x$lat = measurements::conv_unit(x$lat, from = 'deg_dec_min', to = 'dec_deg')
# x$long = measurements::conv_unit(x$long, from = 'deg_dec_min', to = 'dec_deg')
###Clean up lat-longs
#Remove 'W" and Â from longitudes
coords$long <- gsub("W","",coords$long)
coords$long <- gsub("Â","",coords$long)
coords$long <- gsub("'","",coords$long)
coords$long <- gsub("\"","",coords$long)
coords$long <- gsub(" ","",coords$long)
coords$long <- gsub("°$","",coords$long)
#Remove 'N" and Â from longitudes
coords$lat <- gsub("N","",coords$lat)
coords$lat <- gsub("Â","",coords$lat)
coords$lat <- gsub("'","",coords$lat)
coords$lat <- gsub("\"","",coords$lat)
coords$lat <- gsub(" ","",coords$lat)
coords$lat <- gsub("°$","",coords$lat)  #Does this work? Trying to conditional replace if ° is last element in string
conv.coords <- NULL
#Loop through each coordinate value
for(i in 1:nrow(coords)){
#Open loop storage variables
df <- NULL
lat <- 0
long <- 0
stor.lat <- 0
stor.long <- 0
#Check if latitude string is all numeric
if(!is.na(as.numeric(coords$lat[i]))){
#If value within proper range for decimal degrees, pass on
if(abs(as.numeric(coords$lat[i])<70)) {lat <- abs(as.numeric(coords$lat[i]))}
#If value matches longitude instead of latitude, add SWAP flag
if(abs(as.numeric(coords$lat[i]))>70 | abs(as.numeric(coords$lat[i]))<170) {lat <- paste0(as.character(coords$lat[i]),"SWAP")}
#If value outside range, add flag to string
if(abs(as.numeric(coords$lat[i]))>70) {lat <- paste0(as.character(coords$lat[i]),"_FLAG")}
}
#Check if longitude string is all numeric
if(!is.na(as.numeric(coords$long[i]))){
#If value within proper range for decimal degrees, pass on
if(abs(as.numeric(coords$long[i])<170)) {long <- abs(as.numeric(coords$long[i]))}
#If value outside range, add flag to string
if(abs(as.numeric(coords$long[i]))>170) {long <- paste0(as.character(coords$long[i]),"_FLAG")}
}
#Swap lat-long if mismatched
if(grepl("SWAP",lat)) {
lat <- gsub("SWAP","",lat)
stor.lat <- lat
lat <- long
long <- stor.lat
}
#If string matches format for DMS, convert and pass on
if(grepl("°",coords$lat[i])) {
#Fix coord format spacing
stor.lat <- gsub("°"," ",coords$lat[i])
#Convert lat from DMS to DD
lat <- conv_unit(stor.lat, from = 'deg_dec_min', to = 'dec_deg')
}
#If string matches format for DMS, convert and pass on
if(grepl("°",coords$long[i])) {
#Fix coord format spacing
stor.long <- gsub("°"," ",coords$long[i])
#Convert long from DMS to DD
long <- as.numeric(measurements::conv_unit(stor.long, from = 'deg_dec_min', to = 'dec_deg'))
}
#If none of the above, add flag to string to add conditional fix
if(lat == 0){lat <- paste0(coords$lat[i],"_FLAG")}
if(long == 0){long <- paste0(coords$long[i],"_FLAG")}
df <- data.frame(i,coords$lat[i], coords$long[i], stor.lat, stor.long, lat, long)
conv.coords <- rbind(conv.coords,df)
}
View(conv.coords)
coords$lat[i]
coords$lat
unique(conv.coords)
unique(conv.coords$lat)
View(conv.coords)
data <- read.csv("E:/Box/Box Sync/SOM_tarball/tarball_10-18-2018.csv", header=TRUE, stringsAsFactors = FALSE)
coords <- data[,c(18,12:14)]
#how many unique coords do we have?
lat.uniq <- unique(data$lat)
long.uniq <- unique(data$long)
#If lat is # >x<, flag ok, then fix the rest based on pattern
#...Remove A symbols
library(measurements) #provides coordinate conversions
#example
# x = read.table(text = "
#    lat     long
# 105252 30°25.264 9°01.331
# change the degree symbol to a space
# x$lat = gsub('°', ' ', x$lat)
# x$long = gsub('°', ' ', x$long)
# convert from decimal minutes to decimal degrees
# x$lat = measurements::conv_unit(x$lat, from = 'deg_dec_min', to = 'dec_deg')
# x$long = measurements::conv_unit(x$long, from = 'deg_dec_min', to = 'dec_deg')
###Clean up lat-longs
#Remove 'W" and Â from longitudes
coords$long <- gsub("W","",coords$long)
coords$long <- gsub("Â","",coords$long)
coords$long <- gsub("'","",coords$long)
coords$long <- gsub("\"","",coords$long)
coords$long <- gsub(" ","",coords$long)
coords$long <- gsub("°$","",coords$long)
#Remove 'N" and Â from longitudes
coords$lat <- gsub("N","",coords$lat)
coords$lat <- gsub("Â","",coords$lat)
coords$lat <- gsub("'","",coords$lat)
coords$lat <- gsub("\"","",coords$lat)
coords$lat <- gsub(" ","",coords$lat)
coords$lat <- gsub("°$","",coords$lat)  #Does this work? Trying to conditional replace if ° is last element in string
conv.coords <- NULL
#Loop through each coordinate value
for(i in 1:nrow(coords)){
#Open loop storage variables
df <- NULL
lat <- 0
long <- 0
stor.lat <- 0
stor.long <- 0
#Check if latitude string is all numeric
if(!is.na(as.numeric(coords$lat[i]))){
#If value within proper range for decimal degrees, pass on
if(abs(as.numeric(coords$lat[i])<70)) {lat <- abs(as.numeric(coords$lat[i]))}
#If value matches longitude instead of latitude, add SWAP flag
if(abs(as.numeric(coords$lat[i]))>70 | abs(as.numeric(coords$lat[i]))<170) {lat <- paste0(as.character(coords$lat[i]),"SWAP")}
#If value outside range, add flag to string
if(abs(as.numeric(coords$lat[i]))>70) {lat <- paste0(as.character(coords$lat[i]),"_FLAG")}
}
#Check if longitude string is all numeric
if(!is.na(as.numeric(coords$long[i]))){
#If value within proper range for decimal degrees, pass on
if(abs(as.numeric(coords$long[i])<170)) {long <- abs(as.numeric(coords$long[i]))}
#If value outside range, add flag to string
if(abs(as.numeric(coords$long[i]))>170) {long <- paste0(as.character(coords$long[i]),"_FLAG")}
}
#Swap lat-long if mismatched
#if(grepl("SWAP",lat)) {
#  lat <- gsub("SWAP","",lat)
#  stor.lat <- lat
#  lat <- long
#  long <- stor.lat
#}
#If string matches format for DMS, convert and pass on
if(grepl("°",coords$lat[i])) {
#Fix coord format spacing
stor.lat <- gsub("°"," ",coords$lat[i])
#Convert lat from DMS to DD
lat <- conv_unit(stor.lat, from = 'deg_dec_min', to = 'dec_deg')
}
#If string matches format for DMS, convert and pass on
if(grepl("°",coords$long[i])) {
#Fix coord format spacing
stor.long <- gsub("°"," ",coords$long[i])
#Convert long from DMS to DD
long <- as.numeric(measurements::conv_unit(stor.long, from = 'deg_dec_min', to = 'dec_deg'))
}
#If none of the above, add flag to string to add conditional fix
if(lat == 0){lat <- paste0(coords$lat[i],"_FLAG")}
if(long == 0){long <- paste0(coords$long[i],"_FLAG")}
df <- data.frame(i,coords$lat[i], coords$long[i], stor.lat, stor.long, lat, long)
conv.coords <- rbind(conv.coords,df)
}
unique(conv.coords$lat)
unique(conv.coords$long)
#Look at inputs
unique(conv.coords[,2])
#Cut down to only unique values, then use output as lookup table later
coords <- unique(coords)
coords <- data[,c(18,12:14)]
#how many unique coords do we have?
lat.uniq <- unique(data$lat)
long.uniq <- unique(data$long)
#Cut down to only unique values, then use output as lookup table later
coords <- unique(coords)
coords$long <- gsub("Â","",coords$long)
coords$lat <- gsub("Â","",coords$lat)
write.csv(coords,"SOM_coords.csv")
#Load libraries
library(tidyr)
library(googledrive)
library(googlesheets)
library(lattice)
library(reshape2)
library(ggplot2)
library(ggplot2)
library(tidyr)
#Bring in compiled SOM data
data <- read.csv("E:/Box/Box Sync/SOM_tarball/tarball_10-18-2018.csv")
#See full list of data column names
colnames(data)
i <- 22
df <- data[!is.na(data[,i]),]
plot <- ggplot(df, aes(y=df[,i],x=location_name)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90))
ggsave(plot,paste0(colnames(data[i])," by location_boxplot.pdf"), width = 4, height = 4, path=paste0(getwd(),"/temp"), device='pdf')
df <- data[!is.na(data[,i]),]
plot <- ggplot(df, aes(y=df[,i],x=location_name)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90))
ggsave(plot,paste0(colnames(data[i]),"_boxplot.pdf"), width = 4, height = 4, path=paste0(getwd(),"/temp"), device='pdf')
paste0(colnames(data[i]),"_boxplot.pdf")
ggsave(plot,filename=paste0(colnames(data[i])," boxplot.pdf"), width = 4, height = 4, path=paste0(getwd(),"/temp/"), device='pdf')
library(ggplot2)
library(tidyr)
#Bring in compiled SOM data
data <- read.csv("E:/Box/Box Sync/SOM_tarball/tarball_10-18-2018.csv")
#See full list of data column names
#colnames(data)
for (i in 1:10) { #ncol(data)) {
df <- NULL
plot <- NULL
if(is.numeric(na.omit(data[,i]))) {
df <- data[!is.na(data[,i]),]
plot <- ggplot(df, aes(y=df[,i],x=location_name)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90))
ggsave(plot,filename=paste0(colnames(data[i]),"_boxplot.pdf"), width = 4, height = 4, path=paste0(getwd(),"/temp/"), device='pdf')
}
print(paste0("completed ",colnames(data[i])))
}
ncol(data)
library(ggplot2)
library(tidyr)
#Bring in compiled SOM data
data <- read.csv("E:/Box/Box Sync/SOM_tarball/tarball_10-18-2018.csv")
#See full list of data column names
#colnames(data)
for (i in 2:ncol(data)) {
df <- NULL
plot <- NULL
if(is.numeric(na.omit(data[,i]))) {
df <- data[!is.na(data[,i]),]
plot <- ggplot(df, aes(y=df[,i],x=location_name)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90))
ggsave(plot,filename=paste0(colnames(data[i]),"_boxplot.pdf"), width = 4, height = 4, path=paste0(getwd(),"/temp/"), device='pdf')
}
print(paste0("completed ",colnames(data[i])))
}
library(ggplot2)
library(tidyr)
#Bring in compiled SOM data
data <- read.csv("E:/Box/Box Sync/SOM_tarball/tarball_10-18-2018.csv")
#See full list of data column names
#colnames(data)
for (i in 2:ncol(data)) {
df <- NULL
plot <- NULL
if(is.numeric(na.omit(data[,i]))) {
df <- data[!is.na(data[,i]),]
plot <- ggplot(df, aes(y=df[,i],x=location_name)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90)) + ylab(colnames(data[i]))
ggsave(plot,filename=paste0(colnames(data[i]),"_boxplot.pdf"), width = 14, height = 8, path=paste0(getwd(),"/temp/"), device='pdf')
}
print(paste0("completed ",colnames(data[i])))
}
ggplot(df, aes(y=df[,i])) + geom_boxplot()
ggplot(df, aes(y=df$soc)) + geom_boxplot()
ggplot(df, aes(y=data$soc)) + geom_boxplot()
ggplot(data, aes(y=data$soc)) + geom_boxplot()
#Script demonstrating workflow with SOM tarball
#Load libraries
library('dplyr')
library('ggplot2')
library('maps')
library('ggmap')
#Set working drive (folder with ...tarball.csv and clean_coords.csv)
#setwd("C:/Users/Derek/Google Drive/Code/GitHub/SOM/SOM") #HOME PC
setwd("C:/Users/Derek Pierson/Google Drive/Code/GitHub/SOM/SOM") #OSU PC
#Bring in tarball data from working directory
#tarball <- read.csv("E:/Box/Box Sync/SOM_tarball/tarball_10-18-2018.csv", stringsAsFactors = FALSE)  #HOME PC
tarball <- read.csv("C:/Users/Derek Pierson/Box/SOM_tarball/tarball_10-18-2018.csv", stringsAsFactors = FALSE)  #OSU PC
### Data point coordinate fix and map
### Use for now, but we will perform fix on L0 data in future
#Bring in clean coordinate csv
clean.coords <- read.csv("SOM_clean_coords.csv", stringsAsFactors = FALSE)
#Remove duplicate lat & long values to avoid adding rows in join step
clean.lat <- clean.coords %>% distinct(lat, lat.clean)
clean.long <- clean.coords %>% distinct(long, long.clean)
#Join clean coordinate columns to tarball dataframe
data <- left_join(tarball, clean.lat, by="lat") %>% left_join(., clean.long, by="long")
### Narrow data by depth 0-10 cm
df <- data %>% filter(layer_top == 0 & layer_bot == 10)
### Narrow data by treatment, control only
#Take a look at names of level 1 treatments
unique(data$tx_L1)
#Create vector of names used for control or undisturbed sample locations
ctls <- c("c","Undisturbed","Unmanaged","CTL","CO","Control")
#Filter data by L1 treatment values = CONTROL or UNDISTURBED
df <- df %>% filter(tx_L1 %in% ctls)
#Needs work
#####################################################
### Confine data by experimental levels
#Take a look at experimental levels
#Make table count of exp level data (e.g. cols: site name, n of L1, n of L2, etc.)
#data %>%
######################################################
#Needs work
######################################################
###Confine data by time point
######################################################
#See what data has a time element
###Plot SOC using the filtered datasets created above (df)
#Create map dataset with unique lat-longs, soc, and other columns of interest
plt.data <- df %>% select(location_name, site_code, long.clean, lat.clean, soc, layer_top, layer_bot)
#Combine site code and location name for plot x-axis labels
plt.data$plt.name <- paste0(plt.data$site_code," ",plt.data$location_name)
plt.data <- plt.data %>% mutate(plt.name = gsub("NA", "", plt.name))  #Remove NA in labels
#Create boxplot
box_plt1 <- ggplot(plt.data, aes(x=plt.name, y=soc)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
box_plt1  #display plot
##Map mean SOC values from the filtered dataset (df)
#Build from plt.data created in previous step
#Create dataframe with mean SOC values by unique site name and location
map.soc <- plt.data %>% distinct(plt.name,soc,lat.clean,long.clean) %>% filter(!is.na(soc)) %>%
group_by(plt.name) %>% summarise(soc.count = n(),
soc.mn = mean(soc, na.rm = T),
soc.stdv = sd(soc, na.rm = T),
soc.min = min(soc, na.rm = T),
soc.max = max(soc, na.rm = T),
lat = first(lat.clean),
long = first(long.clean))
#Simple point map
map('world')
points(map.soc$long,map.soc$lat, col=2, pch=19)
#Better map
mapWorld <- borders("world", colour="gray50", fill="gray50") # create a layer of borders
map <- ggplot() + mapWorld + geom_point(data = map.soc, aes(x=long, y = lat, color=soc.mn), size=3) + coord_fixed(1.3) +
scale_colour_gradientn(colours=rainbow(4))
map  #Show map
#Script demonstrating data analysis with SOM tarball
#Load libraries
library('dplyr')
library('ggplot2')
library('maps')
library('ggmap')
#Set working drive (folder with ...tarball.csv and clean_coords.csv)
setwd("C:/Users/Derek/Google Drive/Code/GitHub/SOM/SOM") #HOME PC
#setwd("C:/Users/Derek Pierson/Google Drive/Code/GitHub/SOM/SOM") #OSU PC
#Bring in tarball data from working directory
tarball <- read.csv("E:/Box/Box Sync/SOM_tarball/tarball_10-18-2018.csv", stringsAsFactors = FALSE)  #HOME PC
#tarball <- read.csv("C:/Users/Derek Pierson/Box/SOM_tarball/tarball_10-18-2018.csv", stringsAsFactors = FALSE)  #OSU PC
### Data point coordinate fix and map
### Use for now, but we will perform fix on L0 data in future
#Bring in clean coordinate csv
clean.coords <- read.csv("SOM_clean_coords.csv", stringsAsFactors = FALSE)
#Remove duplicate lat & long values to avoid adding rows in join step
clean.lat <- clean.coords %>% distinct(lat, lat.clean)
clean.long <- clean.coords %>% distinct(long, long.clean)
#Join clean coordinate columns to tarball dataframe
data <- left_join(tarball, clean.lat, by="lat") %>% left_join(., clean.long, by="long")
#Join site_code and location_name into full_name
#This makes code below for plt.name unnecessary, but need to update the code below to use full_name
data$full_name <- paste0(data$site_code," ",data$location_name)
data <- data %>% mutate(full_name = gsub("NA", "", full_name))  #Remove NA in labels
unique(data$full_name)
